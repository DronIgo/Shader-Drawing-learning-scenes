[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://oxygdqslnl18"]

[sub_resource type="Shader" id="Shader_i303k"]
code = "shader_type canvas_item;

uniform sampler2D scr_tex : hint_screen_texture;
uniform vec2 dots[45];
uniform int dotNum;
uniform vec4 dotColor : source_color;
uniform float dotSize;
uniform float lineWidth;
uniform float spaceDist;

void vertex() {
	// Called for every vertex the material is visible on.
}

void fragment() {
	
	COLOR = texture(scr_tex, SCREEN_UV);
	
	//for (int i = 0; i < 20;i++){
		//if (length(VERTEX - dots[i].xy) <= dotSize){
			//COLOR = dotColor;
		//}
	//}
	
	float distBetweenSpaces = (spaceDist + fract(TIME/3.0))*20.0;
	float startingDist  = (spaceDist-1.5 + fract(TIME/3.0))*20.0;
	float dist = 0.0;
	
	for (int i = 0; i < dotNum-1;i++){
		float a = (dots[i].y - dots[i+1].y);
		float b = -(dots[i].x - dots[i+1].x);
		vec2 ab = normalize(vec2(a, b));
		float c = - ab.x * dots[i].x - ab.y * dots[i].y;
		
		vec2 dirToFirst = normalize(FRAGCOORD.xy - dots[i].xy);
		vec2 dirToSecond = normalize(FRAGCOORD.xy - dots[i+1].xy);
		vec2 dirBetweenDots = normalize(dots[i].xy - dots[i+1].xy);
		float firstAngle = dot(dirToFirst,-dirBetweenDots);
		float secondAngle = dot(dirToSecond,dirBetweenDots);
		
		
		if (firstAngle >= 0.0 && secondAngle >= 0.0){
			if (abs(ab.x*FRAGCOORD.x + ab.y*FRAGCOORD.y + c) <= lineWidth/2.0){
				//float d = length(dots[i].xy - FRAGCOORD.xy);
				dist += length(dots[i].xy-FRAGCOORD.xy);
				//if (d >= distBetweenSpaces || d <= startingDist){
					//COLOR = dotColor;
				//}
				if (sin(TIME+dist/7.0) > 0.0){
					COLOR = dotColor;
				}
			}
		}
		
		dist += length(dots[i].xy-dots[i+1].xy);
		
		
		//if (length(VERTEX-dots[i].xy) + length(VERTEX-dots[i+1].xy) <= length(dots[i].xy-dots[i+1].xy)+0.1){
			//COLOR = dotColor;
		//}
	}
	
	//for (int i = 0; i < 19;i++){
		//if (length(VERTEX.x-dots[i].x) <= lineWidth/2.0 && VERTEX.y >= dots[i+1].y && VERTEX.y >= dots[i].y){
			//COLOR = dotColor;
		//}
	//}
	// Called for every pixel the material is visible on.
}

//void light() {
//	// Called for every pixel for every light affecting the CanvasItem.
//	// Uncomment to replace the default light processing function with this one.
//}
"

[resource]
shader = SubResource("Shader_i303k")
shader_parameter/dots = PackedVector2Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
shader_parameter/dotNum = 0
shader_parameter/dotColor = Color(6.59391e-06, 0.882658, 0, 1)
shader_parameter/dotSize = 0.01
shader_parameter/lineWidth = 5.0
shader_parameter/spaceDist = 1.5
