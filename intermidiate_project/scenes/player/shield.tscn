[gd_scene load_steps=5 format=3 uid="uid://dsae7a7e8lf0l"]

[sub_resource type="Shader" id="Shader_2bc7y"]
code = "shader_type canvas_item;

void vertex() {
	// Called for every vertex the material is visible on.
}

void fragment() {
	if (abs(UV.x - UV.y) > 1.0){
		discard;
	}
	vec2 pos = 2.0*UV-1.0;
	COLOR = mix(COLOR,vec4(0.0,0.0,0.0,0.0),1.0 - length(pos) + abs(mix(cos(TIME),sin(TIME*2.0),clamp(0.0,1.0,TIME)))/4.0);
	// Called for every pixel the material is visible on.
}

//void light() {
//	// Called for every pixel for every light affecting the CanvasItem.
//	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_q3hpy"]
shader = SubResource("Shader_2bc7y")

[sub_resource type="Gradient" id="Gradient_lsl6d"]
offsets = PackedFloat32Array(0.506494, 0.733766)
colors = PackedColorArray(0, 0, 0.454902, 0.72549, 0, 0, 0, 0)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_m61gp"]
gradient = SubResource("Gradient_lsl6d")
fill = 1
fill_from = Vector2(0.490826, 0.486239)

[node name="Shield" type="Node2D"]

[node name="Sprite2D" type="Sprite2D" parent="."]
texture_filter = 1
material = SubResource("ShaderMaterial_q3hpy")
texture = SubResource("GradientTexture2D_m61gp")
